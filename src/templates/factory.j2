#ifndef _SVD_2_CPP_OBJECTS_{{NAME}}_INCLUDE_HPP_
#define _SVD_2_CPP_OBJECTS_{{NAME}}_INCLUDE_HPP_

{% for peripheral in peripherals.peripheral -%} 
#include "{{peripheral.name}}.hpp"
{% endfor %} 

#include <unordered_map>

#include "Peripheral.hpp" 
 
namespace Svd2cppObjects {
    namespace {{NAME}} {

        class PeripheralFactory
        {

        public:
            enum PERIPHERAL
            {
        {% for peripheral in peripherals.peripheral %}
                {{peripheral.NAME}}
        {%- if not loop.last -%}
        ,
        {% else %}

        {% endif %}
        {% endfor %}
            };

        private:
            static PeripheralFactory* instance_;
            std::unordered_map<PERIPHERAL, Svd2cppObjects::PeripheralBase*> peripherals;

            PeripheralFactory(){};
            ~PeripheralFactory(){};

        public:
            static PeripheralFactory* instance()
            {
                if (instance_ == nullptr)
                {
                    instance_ = new PeripheralFactory();
                }
                return instance_;
            }

            template<typename T>
            T* derived(const PERIPHERAL& name)
            {
                if (peripherals.find(name) != peripherals.end())
                {
                    return reinterpret_cast<T*>(instance()->peripherals[name]);
                }
                return static_cast<T*>(nullptr);
            }

            PeripheralBase* base(const PERIPHERAL& name)
            {
                if (peripherals.find(name) != peripherals.end())
                {
                    return instance()->peripherals[name];
                }
                return nullptr;
            }

            void registerPeripheral(const PERIPHERAL& name, PeripheralBase* peripheral)
            {
                instance()->peripherals[name] = peripheral;
            }




        public:
            static void registerPeripherals()
            {
        {% for peripheral in peripherals.peripheral %}
                instance()->registerPeripheral(PeripheralFactory::PERIPHERAL::{{peripheral.NAME}}, new (0) {{peripheral.groupName}}::{{peripheral.NAME}}(0));
        {% endfor %}
            }

        }; // class PeripheralFactory
    } // namespace {{NAME}}
} // namespace Svd2cppObjects

#endif  // _SVD_2_CPP_OBJECTS_{{NAME}}_INCLUDE_HPP_

