#ifndef _SVD_2_CPP_OBJECTS_{{NAME}}_INCLUDE_HPP_
#define _SVD_2_CPP_OBJECTS_{{NAME}}_INCLUDE_HPP_

{% for peripheral in peripherals.peripheral -%} 
#include "{{peripheral.name}}.hpp"
{% endfor %} 

#include <unordered_map>

#include "Peripheral.hpp" 
 
namespace Svd2cppObjects {
    namespace {{NAME}} {

        class PeripheralFactory
        {
        private:
            static PeripheralFactory* instance_;

            PeripheralFactory(){};
            ~PeripheralFactory(){};

        public:
            PeripheralFactory(PeripheralFactory &other) = delete;
            void operator=(const PeripheralFactory &) = delete;

            static PeripheralFactory* instance()
            {
                if (instance_ == nullptr)
                {
                    instance_ = new PeripheralFactory();
                }
                return instance_;
            }

{% for peripheral in peripherals.peripheral %}
            {{peripheral.groupName}}::{{peripheral.NAME}}* create{{peripheral.NAME}}()
            {
                return new (0) {{peripheral.groupName}}::{{peripheral.NAME}}(0);
            }

{% endfor %}



        }; // class PeripheralFactory
    } // namespace {{NAME}}
} // namespace Svd2cppObjects

#endif  // _SVD_2_CPP_OBJECTS_{{NAME}}_INCLUDE_HPP_

