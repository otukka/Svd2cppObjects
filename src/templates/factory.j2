#ifndef _SVD_2_CPP_OBJECTS_{{platform}}_INCLUDE_HPP_
#define _SVD_2_CPP_OBJECTS_{{platform}}_INCLUDE_HPP_

{% for peripheral in peripherals.peripheral -%}
#include "{{peripheral.name}}.hpp"
{% endfor %}


#include <memory>

 
namespace Svd2cppObjects 
{
    namespace {{platform}} 
    {

        class PeripheralFactory
        {
        private:
            static PeripheralFactory* instance_;

            PeripheralFactory(){};
            ~PeripheralFactory(){};

        public:
            PeripheralFactory(PeripheralFactory &other) = delete;
            void operator=(const PeripheralFactory &) = delete;

            static PeripheralFactory* instance()
            {
                if (instance_ == nullptr)
                {
                    instance_ = new PeripheralFactory();
                }
                return instance_;
            }

{% for peripheral in peripherals.peripheral %}
{%- if peripheral.attr_derivedFrom is not defined %}
            std::shared_ptr<{{peripheral.groupName}}::{{peripheral.peripheral}}_> create{{peripheral.peripheral}}()
            {
                return std::make_shared<{{peripheral.groupName}}::{{peripheral.peripheral}}_>(0);
            }
{%- else %}
            std::shared_ptr<{{peripheral.groupName}}::{{peripheral.attr_derivedFrom}}_> create{{peripheral.peripheral}}()
            {
                return std::make_shared<{{peripheral.groupName}}::{{peripheral.attr_derivedFrom}}_>(0);
            }
{%- endif %}


{% endfor %}
        }; // class PeripheralFactory
    } // namespace {{platform}}
} // namespace Svd2cppObjects

#endif  // _SVD_2_CPP_OBJECTS_{{platform}}_INCLUDE_HPP_

